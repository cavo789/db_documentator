<?php
// Only valid if PHP7 or greater
declare(strict_types = 1);

/**
 * Author: AVONTURE Christophe - https://www.avonture.be.
 *
 * Written date: 15 february 2019
 *
 * This script will establish a connection to a MySQL database
 * and retrieve all tables.
 *
 * Table by table documentation will be generated:
 *
 *    - a .csv file with the first xxx records of the table
 *    - a .sql file with a simple SELECT statement on that table
 *    - a _connection.md file with the info needed for establishing a connection
 *          on the database
 *    - a _description.md file with the description of the table
 *    - a _structure.md file with a markdown table
 *          and will display the structure of the table (fieldname, type
 *          and comments if any)
 * 
 * If create_marknotes setting is set to True, additional .md files will be created:
 *    - a .md file for the documentation of the database itself
 *    - one .md file by table.
 * 
 * These two additional files will use a template defined in the settings.json file, under 
 * marknotes->templates. Please refers to the marknotes documentation to learn more on that tool.
 * @see https://github.com/cavo789/marknotes
 */

namespace AVONTURE;

// Source of this script on github
define('REPO', 'https://github.com/cavo789/db_documentor');

// Name of the settings file
define('SETTINGS', 'settings.json');

// Enable or not the debug mode
define('DEBUG', true);

/**
 * A few helper function.
 */
class Helper
{
    public static function initDebug(bool $onOff)
    {
        if (true === $onOff) {
            ini_set('display_errors', '1');
            ini_set('display_startup_errors', '1');
            ini_set('html_errors', '1');
            ini_set('docref_root', 'http://www.php.net/');
            ini_set('error_prepend_string', "<div style='color:red; font-family:verdana; border:1px solid red; padding:5px;'>");
            ini_set('error_append_string', '</div>');
            error_reporting(E_ALL);
        } else {
            error_reporting(0);
        }
    }
}

/**
 * The main class.
 */
class dbDocumentor
{
    private const DS = DIRECTORY_SEPARATOR;

    /**
     * Database username to use to establish the connection.
     *
     * @var string
     */
    protected $userName = '';

    /**
     * Database password to use to establish the connection.
     *
     * @var string
     */
    protected $password = '';

    /**
     * Database name.
     *
     * @var string
     */
    protected $dbName = '';

    /**
     * Database hostname (like "localhost" f.i.).
     *
     * @var string
     */
    protected $hostName = '';

    /**
     * Type to use for the connection (can be "mysqli", "mysql", ...).
     *
     * @var string
     */
    protected $dbType = 'mysqli';

    /**
     * If a prefix is used for table's names, the prefix should be configured here.
     *
     * @var string
     */
    protected $dbPrefix = '';

    /**
     * Object to the database.
     *
     * @var [type]
     */
    private $mysqli = null;

    /**
     * Path where to save files generated by this class.
     *
     * @var string
     */
    private $outputFolder = '';

    /**
     * Timezone; needed to correctly display date/time
     * Will be initialized in the __constructor to the server's default.
     *
     * @var string
     */
    private $timezone= '';

    /**
     * Format for displaying date/time
     * Default; if not specified, will be Y-m-d h:i:s a.
     *
     * @var string
     */
    private $timeformat = 'Y-m-d h:i:s a';

    /**
     * Number of rows to show in the table samples.
     *
     * @var int
     */
    private $maxrows = 5;

    /**
     * Does this script should generate .csv files?
     *
     * @var bool
     */
    private $create_csv = true;

    /**
     * Does this script should generate .md files?
     *
     * @var bool
     */
    private $create_md = true;

    /**
     * Does this script should generate files for marknotes?
     *
     * @var bool
     */
    private $create_marknotes = false;

    /**
     * Does this script should generate .sql files?
     *
     * @var bool
     */
    private $create_sql = true;

    /**
     * Define the separator to use for CSV files.
     *
     * @var string
     */
    private $csvSeparator = ',';

    /**
     * Information's coming from the settings file for marknotes usage
     * The array will contains a.o.t. templates to use.
     *
     * @var array
     */
    private $marknotes = [];

    /**
     * Enable or not the debug mode.
     *
     * @var bool
     */
    private $debug  = false;

    /**
     * List of tables found in the database.
     * There are two entries for each table: the table name and his description (if filled in of course).
     *
     * @var array
     */
    private $arrTables = [];

    /**
     * Constructor.
     *
     * @param array $db
     *
     *   $db is initialized with a records coming from the settings.json file.
     *   $db contains, at least, the following keys:
     *       host     : Database hostname (like "localhost" f.i.)
     *       name     : Database name.
     *       user     : Database username to use to establish the connection.
     *       password : Database password to use to establish the connection.
     *       prefix   : If a prefix is used for table's names, the prefix should be configured here.
     *       type     : Type to use for the connection (can be "mysqli", "mysql", ...)
     *
     *   and can also contains a output node with:
     *       path     : Path where to save files generated by this class
     *       empty    : Boolean (1 or 0) to tell the class to, first, remove all files in the
     *                      output folder before starting to create file
     */
    public function __construct(array $db)
    {
        $this->hostName = trim($db['host']);
        $this->userName = trim($db['user']);
        $this->password = trim($db['password'] ?? '');
        $this->dbName   = trim($db['name'] ?? '');
        $this->prefix   = trim($db['prefix'] ?? 'mysqli');

        // Retrieve the default time/zone
        $this->timezone = date_default_timezone_get();

        if ('' !== trim($db['type'])) {
            $this->dbType = trim($db['type']);
        }

        if (isset($db['output'])) {
            // Get the name of the output folder (f.i. c:/christophe/output)
            $folder = trim($db['output']['folder']);

            if ('' !== $folder) {
                $folder = str_replace('/', DIRECTORY_SEPARATOR, $folder);
                self::setOutputFolder($folder);
            }

            // Should we first remove all files in the output folder
            $empty = boolval($db['output']['empty'] ?? true);
            if ($empty) {
                self::emptyOutputFolder();
            }
        }
    }

    /**
     * Release objects.
     */
    public function __destruct()
    {
        unset($this->mysqli);
    }

    /**
     * Enable debug mode i.e. set mysqli_report to all.
     *
     * @param bool $onOff
     *
     * @return void
     */
    public function setDebug(bool $onOff)
    {
        $this->debug = $onOff;
        if ($this->debug) {
            mysqli_report(MYSQLI_REPORT_STRICT);
        }
    }

    /**
     * Timezone; needed to correctly display date/time.
     *
     * @param string $timezone (f.i. 'Europe/Brussels')
     *
     * @return void
     */
    public function setTimeZone(string $timezone)
    {
        $this->timezone = $timezone;
        date_default_timezone_set($this->timezone);
    }

    /**
     * Format for displaying date/time.
     *
     * @param string $timeformat (f.i. 'd/m/Y H:i:s')
     *
     * @return void
     */
    public function setTimeFormat(string $timeformat)
    {
        $this->timeformat = rtrim($timeformat) . ' ';
    }

    /**
     * Number of rows to show in the table samples.
     *
     * @param int $maxrows
     *
     * @return void
     */
    public function setMaxRows(int $maxrows)
    {
        $this->maxrows = $maxrows;
    }

    /**
     * Does this script should generate .csv files?
     *
     * @param bool $onOff
     *
     * @return void
     */
    public function setCreateCSV(bool $onOff)
    {
        $this->create_csv = $onOff;
    }

    /**
     * Does this script should generate .md files?
     *
     * @param bool $onOff
     *
     * @return void
     */
    public function setCreateMD(bool $onOff)
    {
        $this->create_md = $onOff;
    }

    /**
     * Does this script should generate files for marknotes?
     *
     * @see https://github.com/cavo789/marknotes
     *
     * @param bool $onOff
     *
     * @return void
     */
    public function setCreateMarknotes(bool $onOff)
    {
        $this->create_marknotes = $onOff;
    }

    /**
     * Does this script should generate . sql files ?
     *
     * @param bool $onOff
     *
     * @return void
     */
    public function setCreateSQL(bool $onOff)
    {
        $this->create_sql = $onOff;
    }

    /**
     * Define the separator to use for CSV files.
     *
     * @param string $separator (f.i. ";")
     *
     * @return void
     */
    public function setCSVSeparator(string $separator)
    {
        $separator          = trim($separator);
        $this->csvSeparator = ('' == $separator ? ',' : $separator);
    }

    /**
     * Information's coming from the settings file for marknotes usage
     * The array will contains a.o.t. templates to use.
     *
     * @param array $data
     *
     * @return void
     */
    public function setMarknotes(array $data)
    {
        $this->marknotes = $data;
    }

    /**
     * Try to connect to the database. Return False in case of failure.
     *
     * @return bool
     */
    public function init(): bool
    {
        $bError = false;

        try {
            $this->mysqli = new \mysqli(
                self::hostName(),
                self::userName(),
                self::password(),
                self::dbName()
            );

            if (0 !== $this->mysqli->connect_errno) {
                $bError = true;
                //@TODO Better managed DB connection's failure
                echo 'Could not connect to mysql; error #' .
                    $this->mysqli->connect_errno . ' - ' . $this->mysqli->connect_error;
            }

            //self::debug('init() - Connection established');

            // Make sure accentuated characters will be correctly handled
            $this->mysqli->set_charset('utf8');

            self::populateTableList();
        } catch (\Exception $e) {
            //@TODO Better managed DB connection's failure
            $bError  = true;
        }

        // if false then no error encountered; success
        return false == $bError;
    }

    /**
     * Return a HTML string to display the used' credentials.
     *
     * @return string
     */
    public function getHTMLCredentials(): string
    {
        if ($this->create_marknotes) {
            // Create the dbname_connection.md file that will be used in the
            // marknotes's database template
            $content =
                '* Host name: ' . self::hostName() . PHP_EOL .
                '* Type: ' . self::dbType() . PHP_EOL .
                '* Username: ' . self::userName() . PHP_EOL .
                '* Password: ' . self::password() . PHP_EOL .
                '* Table prefix: ' . self::dbPrefix() . PHP_EOL;

            self::makeFile(self::dbName() . '_connection.md', $content, 'tables/.files');
        }

        return
            '<ul>' .
            '<li>Host : ' . self::hostName() . '</li>' .
            '<li>Type : ' . self::dbType() . '</li>' .
            '<li>Database : ' . self::dbName() . '</li>' .
            '<li>Username : ' . self::userName() . '</li>' .
            '<li>Password : ' . self::password() . '</li>' .
            '<li>Prefix : ' . self::dbPrefix() . '</li>' .
            '</ul>';
    }

    /**
     * Process the recordset and return a <table>...</table> DOM element with
     * the list of tables and record's count by table.
     *
     * @return string
     */
    public function getListOfTables(): string
    {
        // Retrieve the list of all tables in the database so we can then loop
        $sSQL = 'SELECT * FROM INFORMATION_SCHEMA.TABLES ' .
            "WHERE TABLE_SCHEMA LIKE '" . self::dbName() . "' ORDER BY TABLE_NAME;";

        if ($rows = $this->mysqli->query($sSQL)) {
            $sReturn = '<pre><code class="language-sql">' . $sSQL . '</code></pre>';

            $sReturn .= '<table id="tbl" class="table tablesorter table-hover ' .
                'table-bordered table-striped">' .
                '<thead><td>TableName</td><td># rows</td><td>Description</td></thead>' .
                '<tbody>';

            $sCSV =
                'name' . $this->csvSeparator .
                'rows' . $this->csvSeparator .
                'comment' .
                PHP_EOL;

            while ($row = $rows->fetch_array()) {
                $sReturn .= '<tr>' .
                    '<td>' . $row['TABLE_NAME'] . '</td>' .
                    '<td>' . $row['TABLE_ROWS'] . '</td>' .
                    '<td>' . $row['TABLE_COMMENT'] . '</td>' .
                    '</tr>';

                $sComment = $row['TABLE_COMMENT'];
                $sComment = str_replace(';', ',', $sComment);
                $sComment = str_replace('|', '<br/>', $sComment);

                $sCSV .=
                    $row['TABLE_NAME'] . $this->csvSeparator .
                    $row['TABLE_ROWS'] . $this->csvSeparator .
                    $sComment .
                    PHP_EOL;
            }

            $sReturn .= '</tbody></table>';

            // Generate a xxx_tables.csv file with the list of tables
            if ($this->create_csv) {
                self::makeFile(self::dbName() . '_tables.csv', $sCSV, 'tables/.files');
            }

            if ($this->create_marknotes) {
                self::makeFile(self::dbName() . '.md', self::template('database'));
            }
        }

        return $sReturn;
    }

    /**
     * Process every tables and, one by one, display detailed information's like
     *     - A SELECT * FROM SQL string
     *     - The first xxx records (based on the $this->maxrows constant).
     *
     * @return string
     */
    public function getTablesDetail(): string
    {
        $sReturn = '';

        if (count($this->arrTables) > 0) {
            foreach ($this->arrTables as $key => $table) {
                $tableName        = $table[0];
                $tableDescription = $table[1];
                $tableDescription = str_replace('|', '<br/>', $tableDescription);

                // Generate a _description.md file with a simple SELECT command
                if ($this->create_md) {
                    self::makeFile($tableName . '_description.md', $tableDescription, 'tables/.files');
                }

                $sSQL = 'SELECT * FROM `' . self::dbName() . '`.`' . $tableName . '`;';

                // Generate a .sql file with a simple SELECT command
                if ($this->create_sql) {
                    self::makeFile($tableName . '.sql', $sSQL, 'tables/.files');
                }

                if ($this->create_marknotes) {
                    $arr               =[];
                    $arr['table_name'] = $tableName;
                    self::makeFile($tableName . '.md', self::template('table', $arr), 'tables');
                }

                $sReturn .= '<h3 id="' . $tableName . '">' . $tableName . '</h3>';
                $sReturn .= '<p>' . $tableDescription . '</p>';
                $sReturn .= '<h4>SQL</h4>';
                $sReturn .= '<pre><code class="language-sql">' . $sSQL . '</code></pre>';

                $sReturn .= '<h4>Samples</h4>';
                $sReturn .= self::getFirstRows($tableName);

                $sReturn .= '<h4>Table structure</h4>';
                $sReturn .= self::getTableStructure($tableName);

                $sReturn .= '<hr/>';
            }
        }

        return $sReturn;
    }

    /**
     * Define the output path i.e. where this class can store files.
     *
     * @param string $path
     *
     * @return void
     */
    private function setOutputFolder(string $path)
    {
        $path = trim($path, '/\\');
        $path .= DIRECTORY_SEPARATOR;

        if (!is_dir($path)) {
            mkdir($path, 0755);

            $f = fopen($path . '.htaccess', 'w');
            fwrite($f, "# This folder shouldn't be accessible\nDeny from all");
            fclose($f);
        }

        $this->outputFolder = $path;
    }

    /**
     * Remove all files present in the output folder.
     *
     * @return void
     */
    private function emptyOutputFolder()
    {
        if (is_dir($this->outputFolder)) {
            if (is_writable($this->outputFolder)) {
                // Get the list of any files then unlink them
                array_map('unlink', glob($this->outputFolder . '*.*'));
            }
        }
    }

    /**
     * Create a file on disk; in the output folder.
     *
     * @param string $filename  Basename of the file (no path)
     * @param string $content   The file's content
     * @param string $subfolder Sub-folder where to put the file
     *
     * @return void
     */
    private function makeFile(
        string $filename,
        string $content,
        string $subfolder = ''
    ) {
        // Get the output folder
        $path = self::outputFolder();

        // The file to create will be used by marknotes so create it in the specified sub-folder
        if ($this->create_marknotes) {
            $path .= $subfolder . self::DS;
            if (!is_dir($path)) {
                mkdir($path, 0755, true);
            }
        }

        // Create the file
        $f = fopen($path . $filename, 'w');
        fwrite($f, $content);
        fclose($f);
    }

    /**
     * Get the table structure.
     *
     * @param string $tableName
     *
     * @return string
     */
    private function getTableStructure(string $tableName): string
    {
        $sReturn = '';

        $sSQL = 'SHOW FULL COLUMNS FROM `' . self::dbName() . '`.`' . $tableName . '`';

        if ($rows = $this->mysqli->query($sSQL)) {
            $sReturn = '| FieldName | Type | Key | Nullable | Comment |' . PHP_EOL .
                '| --- | --- | --- | --- | --- |' . PHP_EOL;

            foreach ($rows as $col) {
                $key = '';

                // Is the field is part of a key?
                if (isset($col['Key'])) {
                    switch (strtolower(trim($col['Key']))) {
                        case 'mul':
                            $key = 'Multiple';

                            break;
                        case 'pri':
                            $key = 'Primary';

                            break;
                        case 'uni':
                            $key = 'Unique';

                            break;
                        default:
                            $key = $col['Key'];

                            break;
                    }
                }

                $sReturn .= '| `' . $col['Field'] . '` | ' . $col['Type'] . ' | ' .
                    $key . ' | ' . strtolower($col['Null']) . ' | ' . $col['Comment'] . ' |' . PHP_EOL;
            }

            // Generate a .md file with the structure of the table
            if ($this->create_md) {
                $sReturn = '*Last update: ' . date($this->timeformat, time()) . '*' .
                    PHP_EOL . PHP_EOL . $sReturn;

                self::makeFile($tableName . '_structure.md', $sReturn, 'tables/.files');
            }
        }

        $sReturn = '<pre>' . $sReturn . '</pre>';

        return $sReturn;
    }

    /**
     * Process the recordset: rows in a specific table.
     *
     * @param mysqli_result $rows
     * @param string        $filename
     *
     * @return string
     */
    private function makeCSV(\mysqli_result $rows, string $filename): string
    {
        // Should we create a .csv file on disk or not?
        if (!$this->create_csv) {
            $filename = 'php://memory';
        }

        $f = fopen($filename, 'wt');

        // First row to process, the row with fieldnames
        $headerRow = true;

        // Loop all rows and generate the CSV content
        while ($row = $rows->fetch_assoc()) {
            if ($headerRow) {
                // Get the header row i.e. fieldnames
                fputcsv($f, array_keys($row), $this->csvSeparator);
                $headerRow = false;
            }

            fputcsv($f, $row, $this->csvSeparator);
        }

        // Get the first rows of the file
        // Use "+1" because the first line is the row with column's heading
        if ($this->create_csv) {
            $firstRows = implode('', array_slice(file($filename), 0, $this->maxrows + 1));
        } else {
            // Special case since the file wasn't created on disk but on memory
            rewind($f);

            ob_start();
            fpassthru($f);
            $firstRows = ob_get_contents();
            ob_end_clean();
        }

        fclose($f);

        return $firstRows;
    }

    /**
     * Get the first xxx rows of the table and display them on screen
     * If the $this->create_csv constant is set to true, output a .csv
     * file into the OUTPUT folder.
     *
     * @param string $tblName
     *
     * @return string
     */
    private function getFirstRows(string $tableName): string
    {
        $sReturn = '';

        $sSQL = 'SELECT * FROM `' . self::dbName() . '`.`' . $tableName . '` LIMIT ' . $this->maxrows;

        if ($rows = $this->mysqli->query($sSQL)) {
            // Generate a CSV file and get his content so we can display it

            $path = $this->outputFolder . ($this->create_marknotes ? 'tables/.files' . self::DS : '');
            $CSV  = self::makeCSV($rows, $path . $tableName . '.csv');

            if ('' === $CSV) {
                $sReturn .= '<div>The table is empty.</div>';
            } else {
                $sReturn .= '<pre>' . $CSV . '</pre>';
            }
        }

        return $sReturn;
    }

    /**
     * Retrieve the list of all tables in the database and initialize the $arrTables
     * variable.
     *
     * @return void
     */
    private function populateTableList()
    {
        //self::debug('populateTableList() called');

        $this->arrTables = null;

        $sSQL = 'SELECT * FROM INFORMATION_SCHEMA.TABLES ' .
            "WHERE TABLE_SCHEMA LIKE '" . self::dbName() . "' ORDER BY TABLE_NAME;";

        if ($rows = $this->mysqli->query($sSQL)) {
            while ($row = $rows->fetch_array()) {
                $this->arrTables[] = [$row['TABLE_NAME'], $row['TABLE_COMMENT']];
            }
        }
    }

    /**
     * Show a debug message when running with debug mode set.
     *
     * @param string $line
     *
     * @return void
     */
    private function debug(string $line)
    {
        if ($this->debug) {
            echo '<em>DebugMode - ' . $line . '</em><br/>';
        }
    }

    /**
     * Get the database host.
     *
     * @return string
     */
    private function hostName(): string
    {
        return $this->hostName;
    }

    /**
     * Get the database name.
     *
     * @return string
     */
    private function dbName(): string
    {
        return $this->dbName;
    }

    /**
     * Get the database user name.
     *
     * @return string
     */
    private function userName(): string
    {
        return $this->userName;
    }

    /**
     * Get the password to use for making a connection to the database.
     *
     * @return string
     */
    private function password(): string
    {
        return $this->password;
    }

    /**
     * Return the table's prefix if there is one.
     *
     * @return string
     */
    private function dbPrefix(): string
    {
        return $this->dbPrefix;
    }

    /**
     * Return the database type (f.i. "mysqli").
     *
     * @return string
     */
    private function dbType(): string
    {
        return $this->dbType;
    }

    /**
     * Path where to save files generated by this class.
     *
     * @return string
     */
    private function outputFolder(): string
    {
        return $this->outputFolder;
    }

    /**
     * Get a template from the marknotes data.
     *
     * @param string $sName     Name of the template to return
     * @param array  $variables Array with extra name like TABLE_NAME and their values
     *
     * @return string
     */
    private function template(string $sName, array $variables = []): string
    {
        $tmp = '';

        if (isset($this->marknotes['templates'])) {
            $tmpl = $this->marknotes['templates'][$sName] ?? '';

            if (is_array($tmpl)) {
                $tmpl = implode(PHP_EOL, $tmpl);
            }

            if ('' !== $tmpl) {
                $tmpl = str_replace('@@DB_NAME@@', self::dbName(), $tmpl);

                if (count($variables) > 0) {
                    foreach ($variables as $name => $value) {
                        $tmpl = str_replace('@@' . strtoupper($name) . '@@', $value, $tmpl);
                    }
                }
            }
        }

        return $tmpl;
    }
}

/**
 * Read the settings.json file.
 * If something goes wrong with the file, exit the script and show an error message.
 *
 * @return array
 */
function readSettings(): array
{
    $arr = [];

    if (file_exists(SETTINGS)) {
        $json = file_get_contents(SETTINGS);
        if ('' == trim($json)) {
            die('Sorry, the ' . SETTINGS . ' file is empty, please read the documentation at ' . REPO);
        }

        $arr = json_decode($json, true);
    } else {
       // die('Sorry, the ' . SETTINGS . ' file is missing, please read the documentation at ' . REPO);
    }

    return $arr;
}

/**
 * A database name has been selected; retrieve informations and generate doc.
 *
 * @param string $dbName
 *
 * @return array
 */
function doIt(string $dbName): array
{
    // Just in case
    if ('' == $dbName) {
        return
            [
                'status'  => '0',
                'message' => 'Error, no database name provided; something ' .
                    'goes wrong with the ajax call',
            ];
    }

    $dbName = base64_decode($dbName);

    $arr = readSettings();

    foreach ($arr['databases'] as $db) {
        if ($db['name'] == $dbName) {
            break;
        }
    }

    // In case of: the search dbname isn't found in the settings file. Should not occurs
    // except if the file has been updated after that the form has been displayed.
    if ($db['name'] !== $dbName) {
        return
            [
                'status'  => '0',
                'message' => 'Error, no database called ' . $dbName . ' has been ' .
                    'retrieved in your ' . SETTINGS . 'file',
            ];
    }

    // Ok, we've retrieved our database from the settings file

    $arrReturn = [];

    // 1 for success
    $arrReturn['status'] = 1;

    // Instantiate and initialize our class
    $dbDoc = new \AVONTURE\dbDocumentor($db);

    $dbDoc->setDebug(DEBUG);

    // Get the configuration coming from the setting file
    $dbDoc->setTimeZone($arr['config']['timezone'] ?? 'Europe/Brussels');
    $dbDoc->setTimeFormat($arr['config']['timeformat'] ?? 'd/m/Y H:i:s');
    $dbDoc->setMaxRows(intval($arr['config']['maxrows'] ?? 5));
    $dbDoc->setCreateCSV(boolval($arr['config']['create_csv'] ?? true));
    $dbDoc->setCreateMD(boolval($arr['config']['create_md'] ?? true));
    $dbDoc->setCreateMarknotes(boolval($arr['config']['create_marknotes'] ?? false));
    $dbDoc->setCreateSQL(boolval($arr['config']['create_sql'] ?? true));
    $dbDoc->setCSVSeparator($arr['config']['csv_separator'] ?? ',');

    // Get marknotes configuration coming from the setting file
    // Useful only when config.create_marknotes is equal to true in the config
    // node
    $dbDoc->setMarknotes($arr['marknotes'] ?? []);

    // For easiness, return a HTML string
    if (boolval($arr['config']['get_credentials'] ?? true)) {
        $arrReturn['credentials'] = $dbDoc->getHTMLCredentials();
    }

    if (!$dbDoc->init()) {
        $arrReturn['status']  = 0; // Error
        $arrReturn['message'] = 'Fatal error with the database connection, ' .
            'invalid credentials, please review your ' . SETTINGS . ' file';
    }

    // For easiness, return a HTML string
    $arrReturn['tables'] = $dbDoc->getListOfTables();

    if (boolval($arr['config']['get_detail'] ?? true)) {
        $arrReturn['detail'] = $dbDoc->getTablesDetail();
    }

    if (
        boolval($arr['config']['create_csv'] ?? true) ||
        boolval($arr['config']['create_md'] ?? true)
    ) {
        $arrReturn['conclusion'] = 'Files have been created in folder ' . $db['output']['folder'];
    } else {
        $arrReturn['conclusion'] = 'The database has been successfully processed';
    }

    return $arrReturn;
    // No more needed, release the object
    unset($dbDoc);

    $sReturn .= '<script>initSort();</script>';
}

// ENTRY POINT
Helper::initDebug(DEBUG);

// Get the data sent by Ajax.
$data   = json_decode(file_get_contents('php://input'), true);
$task   = trim(filter_var(($data['task'] ?? ''), FILTER_SANITIZE_STRING));
$dbName = trim(filter_var(($data['dbName'] ?? ''), FILTER_SANITIZE_STRING));

if ('doIt' === $task) {
    $result = doIt($dbName);

    // Do the job. doIt() will return an array
    die(json_encode($result));
} else {
    // Read the settings.json file and initialize the list of databases
    $arr = readSettings();

    // Get the list of databases
    $sDBNames = '';

    // Sort databases
    if (isset($arr['databases'])) {
        sort($arr['databases']);
   
        // $sDBNames will be used for our <select>...</select> for allowing the user to
        // select a database
        foreach ($arr['databases'] as $db) {
            $sDBNames .= '<option value="' . $db['name'] . '">' . $db['name'] . '</option>';
        } 
    }
}

// Get the GitHub corner
$github = '';
if (is_file($cat = __DIR__ . DIRECTORY_SEPARATOR . 'octocat.tmpl')) {
    $github = str_replace('%REPO%', REPO, file_get_contents($cat));
}

?>

<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="utf-8"/>
        <meta name="author" content="Christophe Avonture" />
        <meta name="robots" content="noindex, nofollow" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=9; IE=8;" />
        <title>Database documentation tool</title>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.4/css/bulma.min.css" rel="stylesheet" media="screen" />
        <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/themes/prism.min.css" rel="stylesheet" media="screen" />
        <link href="https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.25.3/css/theme.ice.min.css" rel="stylesheet" media="screen" />
   </head>

   <body>

        <?php echo $github; ?>

        <section class="section">
            <div class="container">
                <h1 class="title is-3">Database documentor</h1>
                <p class="subtitle">Document each table of your database; create .csv and multiple .md files so you can easily retrieve these information's for your favorites documentation tool.</p>

                <small class="content has-text-info">
                    The configuration is coming from the 
                    <?php echo __DIR__ . DIRECTORY_SEPARATOR . SETTINGS; ?> file; 
                    if the file isn't there, please copy `settings.json.dist` and name the new file 
                    <?php echo __DIR__ . DIRECTORY_SEPARATOR . SETTINGS; ?> needed please edit it and adapt the program to your needs. Read documentation
                    on <a href="<?php echo REPO; ?>">GitHub</a> to learn how to do.
                </small>

                <hr/>

                <div id="app">

                    <div class="field is-horizontal">
                        <div class="field-label is-normal">
                            <label class="label" for="select_dbname">Please select your database:</label>
                        </div>                    
                        <div class="field-body">
                            <div class="field">
                                <p class="control">
                                    <span class="select">
                                        <select  @change="selectDbName" class="select" v-model="name" id="select_dbname" ><?php echo $sDBNames; ?></select>
                                    </span>
                                </p>
                            </div>
                        </div>
                    </div>

                    <h2 class="title is-4" v-if="name">{{ name }}</h2>

                    <errors v-if="errors.length" :errors="errors"></errors>

                    <credentials v-if="credentials" :html="credentials"></credentials>

                    <tables v-if="tables" :html="tables"></tables>

                    <detail v-if="detail" :html="detail"></detail>

                    <conclusion :html="conclusion"></conclusion>

                </div>
            </div>
        </section>

        <script src="https://unpkg.com/vue"></script>
        <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

        <!-- jQuery need for tablesorter plugin; used in the "List of tables" part -->
        <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.25.3/js/jquery.tablesorter.combined.min.js"></script>

        <!-- Prism - Highlight SQL statements -->
        <script type="text/javascript" data-manual src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/prism.min.js"></script>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-sql.js"></script>
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-plsql.min.js"></script>

        <script>
            Vue.component("errors", {
                template:
                    `<div class="content has-text-danger">
                        <b>Please correct the following error(s):</b>
                        <ul>
                            <li v-for="error in errors">{{ error }}</li>
                        </ul>
                    </div>`,
                props: {
                    errors: {
                        type: Array
                    }
                }
            });

            Vue.component("credentials", {
                template:
                    `<div class="content">
                        <details>
                            <summary>Connection information</summary>
                            <div v-html="html" />
                        </details>
                    </div>`,
                props: {
                    html: {
                        type: String
                    }
                }
            });

            Vue.component("tables", {
                template:
                    `<div class="content">
                        <details>
                            <summary>Summary of tables</summary>
                            <div v-html="html" />
                        </details>
                    </div>`,
                props: {
                    html: {
                        type: String
                    }
                },
                mounted() {
                    // Make the table sortable thanks to the tableSorter plugin
                    $("#tbl").tablesorter({
                    theme: "ice",
                    widthFixed: false,
                    sortMultiSortKey: "shiftKey",
                    sortResetKey: "ctrlKey",
                    headers: {
                    0: {sorter: "text"}, // Table name
                    1: {sorter: "digit"} // Number of records
                    },
                    ignoreCase: true,
                    headerTemplate: "{content} {icon}",
                    widgets: ["uitheme", "filter"],
                    initWidgets: true,
                    widgetOptions: {
                    uitheme: "ice"
                    },
                    sortList: [[0]]  // Sort by default on the table name
                });
                }
            });

            Vue.component("detail", {
                template:
                    `<div class="content">
                        <details>
                            <summary>List of tables</summary>
                            <div v-html="html" />
                        </details>
                    </div>`,
                props: {
                    html: {
                        type: String
                    }
                }
            });

            Vue.component("conclusion", {
                template:
                    `<div class="content has-text-success"><div v-html="html" /></div>`,
                props: {
                    html: {
                        type: String
                    }
                }
            });

            var app = new Vue({
                el: '#app',
                data: {
                    conclusion: '',
                    credentials: '',
                    detail: '',
                    name: '',
                    errors: [],
                    status: 0,
                    tables: ''
                },
                methods: {
                    selectDbName() {
                        this.errors = [];
                        this.conclusion = '';
                        this.credentials = '';
                        this.detail = '';
                        this.tables = '';

                        var $data = {
                            task: 'doIt',
                            dbName: window.btoa(this.name)
                        }

                        axios.post('<?php echo basename(__FILE__); ?>', $data)
                        .then(response => {
                            if (response.data.status==0) {
                                // status = 0 means errors
                                this.errors.push(response.data.message);
                            }

                            this.credentials = response.data.credentials;
                            this.tables = response.data.tables;
                            this.detail = response.data.detail;
                            this.conclusion = response.data.conclusion;
                        })
                        .catch(function (error) {console.log(error);})
                        .then(function() {
                            if (typeof Prism === 'object') {
                                // Use prism.js and highlight source code
                                Prism.highlightAll();
                            }
                        });
                    }
                }
            });
        </script>

   </body>
</html>
